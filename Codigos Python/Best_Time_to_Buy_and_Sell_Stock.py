# Fonte: https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
# Autor: Bruno Harlis
# Data: 23/08/2021

"""
PROBLEMA PROPOSTO:
Você recebe uma matriz pricesonde prices[i]é o preço de uma determinada ação no dia ith
Você deseja maximizar seu lucro escolhendo um único dia para comprar uma ação e 
escolhendo um dia diferente no futuro para vender essa ação.

Retorne o lucro máximo que você pode obter com esta transação . Se você não conseguir 
obter nenhum lucro, volte 0.

Exemplo 1:
Entrada: preços = [7,1,5,3,6,4]
 Saída: 5
 Explicação: Compre no dia 2 (preço = 1) e venda no dia 5 (preço = 6), lucro = 6-1 = 5.
Observe que comprar no dia 2 e vender no dia 1 não é permitido porque você deve comprar 
antes de vender.

Tempo de execução: 928 ms, mais rápido do que 95,14 % dos envios.
Uso de memória: 25,3 MB, menos de 11,46 % dos envios.
"""


def maxProfit(prices):
    lucro = 0
    menorP = 10**4
    for i in prices:
        if i < menorP:
            menorP = i

        if (i - menorP) > lucro:
            lucro = i - menorP

    return lucro


if __name__ == '__main__':
    print(maxProfit([7, 1, 5, 3, 6, 4]))
    print(maxProfit([7, 6, 4, 3, 1]))
    print(maxProfit([1, 2]))
    print(maxProfit([2, 4, 1]))
    print(maxProfit([10000, 9999, 9998, 9997, 9996, 9995, 9994, 9993, 9992, 9991, 9990, 9989, 9988, 9987, 9986, 9985, 9984, 9983, 9982, 9981, 9980, 9979, 9978, 9977, 9976, 9975, 9974, 9973, 9972, 9971, 9970, 9969, 9968, 9967, 9966, 9965, 9964, 9963, 9962, 9961, 9960, 9959, 9958, 9957, 9956, 9955, 9954, 9953, 9952, 9951, 9950, 9949, 9948, 9947, 9946, 9945, 9944, 9943, 9942, 9941, 9940, 9939, 9938, 9937, 9936, 9935, 9934, 9933, 9932, 9931, 9930, 9929, 9928, 9927, 9926, 9925, 9924, 9923, 9922, 9921, 9920, 9919, 9918, 9917, 9916, 9915, 9914, 9913, 9912, 9911, 9910, 9909, 9908, 9907, 9906, 9905, 9904, 9903, 9902,
          9901, 9900, 9899, 9898, 9897, 9896, 9895, 9894, 9893, 9892, 9891, 9890, 9889, 9888, 9887, 9886, 9885, 9884, 9883, 9882, 9881, 9880, 9879, 9878, 9877, 9876, 9875, 9874, 9873, 9872, 9871, 9870, 9869, 9868, 9867, 9866, 9865, 9864, 9863, 9862, 9861, 9860, 9859, 9858, 9857, 9856, 9855, 9854, 9853, 9852, 9851, 9850, 9849, 9848, 9847, 9846, 9845, 9844, 9843, 9842, 9841, 9840, 9839, 9838, 9837, 9836, 9835, 9834, 9833, 9832, 9831, 9830, 9829, 9828, 9827, 9826, 9825, 9824, 9823, 9822, 9821, 9820, 9819, 9818, 9817, 9816, 9815, 9814, 9813, 9812, 9811, 9810, 9809, 9808, 9807, 9806, 9805, 9804, 9803, 9802, 980]))
    print(maxProfit([900, 510, 174, 329, 873, 382, 279, 855, 396, 810, 322, 192, 442, 775, 445, 861, 303, 975, 478, 543, 87, 875, 283, 740, 376, 156, 521, 462, 987, 683, 462, 792, 491, 641, 359, 423, 795, 459, 503, 443, 935, 940, 120, 579, 945, 916, 509, 513, 964, 666, 812, 244, 565, 896, 174, 546, 837, 383, 961, 0, 486, 221, 770, 595, 65, 222, 576, 224, 566, 916, 249, 70, 101, 155, 2, 879, 972, 390, 420, 267, 221, 879, 719, 329, 845, 831, 836, 617, 534, 979, 761, 590, 346, 866, 947, 838, 96, 430, 137, 370, 870, 261, 923, 388, 405, 438, 163, 250, 625, 552, 158, 916, 711, 384, 361, 382, 862, 321, 607, 493, 850, 22, 802, 261, 254, 484,
          221, 535, 449, 143, 43, 982, 631, 844, 343, 280, 214, 595, 151, 646, 522, 463, 890, 759, 237, 796, 231, 617, 298, 178, 264, 489, 655, 645, 188, 180, 443, 772, 503, 376, 471, 741, 660, 710, 877, 206, 807, 230, 743, 168, 336, 10, 675, 152, 223, 828, 183, 323, 914, 305, 612, 922, 608, 670, 803, 744, 539, 978, 899, 309, 696, 579, 209, 884, 821, 690, 245, 165, 945, 262, 90, 732, 746, 190, 160, 559, 463, 414, 339, 900, 198, 285, 514, 421, 221, 408, 237, 597, 35, 802, 898, 217, 97, 78, 839, 609, 762, 387, 542, 678, 641, 381, 762, 130, 115, 424, 162, 258, 785, 958, 607, 499, 534, 643, 935, 866, 104, 123, 463, 749, 473, 669, 363, 11]))
